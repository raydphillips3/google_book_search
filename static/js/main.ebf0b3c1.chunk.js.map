{"version":3,"sources":["serviceWorker.js","components/utils/API.js","components/list.js","index.js"],"names":["Boolean","window","location","hostname","match","axios","get","bookData","post","List","children","className","ListItem","Search","props","useState","book","setBook","result","setResult","saveBooks","API","then","res","data","catch","err","console","log","useEffect","href","onClick","event","preventDefault","items","type","onChange","target","value","placeholder","id","map","src","volumeInfo","imageLinks","thumbnail","alt","title","authors","description","infoLink","navigator","serviceWorker","ready","registration","unregister","error","message","rootElement","document","getElementById","ReactDOM","render"],"mappings":"kPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBChBS,EAEH,WACR,OAAOC,IAAMC,IAAI,cAHN,EAOF,SAASC,GAClB,OAAOF,IAAMG,KAAK,YAAaD,I,MCL5B,SAASE,EAAT,GAA6B,IAAbC,EAAY,EAAZA,SACrB,OACE,yBAAKC,UAAU,2BACb,wBAAIA,UAAU,cAAcD,IAK3B,SAASE,EAAT,GAAiC,IAAbF,EAAY,EAAZA,SACzB,OAAO,wBAAIC,UAAU,mBAAmBD,GCF1C,IAAMG,EAAS,SAACC,GAAW,IAAD,EAEAC,mBAAS,IAFT,mBAEjBC,EAFiB,KAEXC,EAFW,OAGIF,mBAAS,IAHb,mBAGjBG,EAHiB,KAGTC,EAHS,KAuBxB,SAASC,IACPC,IACGC,MAAK,SAAAC,GAAG,OACTN,EAAQM,EAAIC,SAEbC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAoB9B,OA3CEG,qBAAU,WAURR,IACGC,MAAK,SAAAC,GAAG,OACPN,EAAQM,EAAIC,SAEbC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAZ3B,IAEHG,qBAAU,WACRT,MACC,IAsCH,yBAAKT,UAAU,aACb,yBAAKA,UAAU,OACb,kDACA,uBAAGA,UAAU,WAAWmB,KAAK,KAA7B,UACA,uBAAGnB,UAAU,WAAWmB,KAAK,SAA7B,SAEF,0BAAMC,QAhBV,SAAsBC,GACpBA,EAAMC,iBACN5B,IAAMC,IAAI,iDAAmDU,EAC3D,8DACCM,MAAK,SAAAE,GACJL,EAAUK,EAAKA,KAAKU,YAYpB,yBAAKvB,UAAU,oBACb,yBAAKA,UAAU,wBAEf,2BAAOwB,KAAK,OAAOC,SAzB3B,SAAsBJ,GACpB,IAAMhB,EAAOgB,EAAMK,OAAOC,MAC1BrB,EAAQD,IAwBAL,UAAU,eACV4B,YAAY,iBAEhB,yBAAK5B,UAAU,eACb,4BAAQwB,KAAK,SAASK,GAAG,YAAY7B,UAAU,gBAA/C,YAGJ,yBAAKA,UAAU,MAAM6B,GAAG,WACtB,uCACA,kBAAC/B,EAAD,KACGS,EAAOuB,KAAI,SAAAzB,GAAI,OACd,kBAACJ,EAAD,KACE,yBAAKD,UAAU,MAAM6B,GAAG,WACtB,yBAAK7B,UAAU,SACb,yBAAK+B,IAAK1B,EAAK2B,WAAWC,WAAWC,UAAWC,IAAK9B,EAAK+B,SAE5D,yBAAKpC,UAAU,SACb,2BAAIK,EAAK2B,WAAWI,OADtB,OACoC,2BAAI/B,EAAK2B,WAAWK,SACtD,wCAAa,6BACVhC,EAAK2B,WAAWM,cAGrB,yBAAKtC,UAAU,SACb,uBAAGmB,KAAMd,EAAK2B,WAAWO,SAAUb,OAAO,UACxC,4BAAQF,KAAK,SAASxB,UAAU,gBAAhC,SAEF,2BAAG,4BAAQwB,KAAK,SAChBK,GAAG,UAAUT,QAASX,EACtBT,UAAU,mBAFP,mBAYJE,YHqBT,kBAAmBsC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd9B,OAAM,SAAA+B,GACL7B,QAAQ6B,MAAMA,EAAMC,YGrB5B,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAAC,EAAD,MAAYJ,K","file":"static/js/main.ebf0b3c1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\nexport default {\n  // Gets all books\n  getBooks: function() {\n    return axios.get(\"/api/book\");\n  },\n  \n  // Saves books to the database\n  postBooks: function(bookData) {\n    return axios.post(\"/api/book\", bookData);\n  },\n\n  // Deletes the book with the given id\n  deleteBook: function(id) {\n    return axios.delete(\"/api/book/\" + id);\n  }\n};\n","import React from \"react\";\nimport \"./style.css\";\n\n// This file exports both the List and ListItem components\n\nexport function List({ children }) {\n  return (\n    <div className=\"list-overflow-container\">\n      <ul className=\"list-group\">{children}</ul>\n    </div>\n  );\n}\n\nexport function ListItem({ children }) {\n  return <li className=\"list-group-item\">{children}</li>;\n}\n","import React, { useState, useEffect } from 'react';\nimport ReactDOM from \"react-dom\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport axios from \"axios\"\nimport API from \"./components/utils/API\"\nimport { List, ListItem } from \"./components/list\";\n\n\n\n\n\nconst Search = (props) => {\n\n  const [book, setBook] = useState(\"\");\n  const [result, setResult] = useState([]);\n\n  useEffect(() => {\n    loadBooks();\n  }, []);\n\n  useEffect(() => {\n    saveBooks();\n  }, []);\n\n  function loadBooks() {\n    // Get books and store them using setBooks\n    API.getBooks()\n      .then(res =>\n        setBook(res.data)\n      )\n      .catch(err => console.log(err));\n  };\n\n  // Saves Books to Save Page\n  function saveBooks() {\n    API.postBooks()\n      .then(res =>\n      setBook(res.data)\n      )\n    .catch(err => console.log(err));\n};\n\n\n\n\nfunction handleChange(event) {\n  const book = event.target.value;\n  setBook(book);\n}\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  axios.get(\"https://www.googleapis.com/books/v1/volumes?q=\" + book +\n    \"&key=AIzaSyC1N08CB95xJ2toeMLKdVtggRC4Hz4g9as&maxResults=10\")\n    .then(data => {\n      setResult(data.data.items)\n    })\n}\n\nreturn (\n  <div className=\"container\">\n    <nav className=\"nav\">\n      <h3>Google Book Search</h3>\n      <a className=\"nav-link\" href=\"/\">Search</a>\n      <a className=\"nav-link\" href=\"/save\">Save</a>\n    </nav>\n    <form onClick={handleSubmit}>\n      <div className=\"input-group mb-3\">\n        <div className=\"input-group-prepend\">\n        </div>\n        <input type=\"text\" onChange={handleChange}\n          className=\"form-control\"\n          placeholder=\"Seach Books\" />\n      </div>\n      <div className=\"float-right\">\n        <buttom type=\"submit\" id=\"searchBtn\" className=\"btn btn-dark\">Search</buttom>\n      </div>\n    </form>\n    <div className=\"row\" id=\"bookRes\">\n      <h3>Results</h3>\n      <List>\n        {result.map(book => (\n          <ListItem>\n            <div className=\"row\" id=\"bookRes\">\n              <div className=\"col-3\">\n                <img src={book.volumeInfo.imageLinks.thumbnail} alt={book.title} />\n              </div>\n              <div className=\"col-6\">\n                <b>{book.volumeInfo.title}</b> by <i>{book.volumeInfo.authors}</i>\n                <p>Synopsis: <br />\n                  {book.volumeInfo.description}\n                </p>\n              </div>\n              <div className=\"col-3\">\n                <a href={book.volumeInfo.infoLink} target=\"_blank\">\n                  <button type=\"button\" className=\"btn btn-info\">View</button>\n                </a>\n                <a><button type=\"button\" \n                id=\"saveBtn\" onClick={saveBooks}\n                className=\"btn btn-success\" >Save</button></a>\n              </div>\n            </div>\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  </div>\n);\n}\nexport default Search;\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Search />, rootElement);\n"],"sourceRoot":""}